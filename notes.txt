Type coercion - Mutating the datatype

'I am' + 23 = 'I am 23'
'1' + '1' = 11
'23' - '10' = 13
'10' / '5' = 2


Falsy values

0, '', undefined, null, NaN



Smart way of accessing arrays:

const calcTip = (bill) => {
  const tip = bill >= 50 && bill <= 300 ? bill * 0.15 : bill * 0.2;

  return tip;
};

const bills = [125, 555, 44];
const tips = bills.map((bill) => calcTip(bill));
const totals = bills.map((bill, index) => bill + tips[index]);



Smart way of accessing objects when using similar object names

const jonas = {
  firstName: 'Jonas',
  lastName: 'Schmedtmann',
  age: 2037 - 1991,
  job: 'teacher',
  friends: ['Michael', 'Peter', 'Steven'],
};


const nameKey = 'Name';
console.log(jonas['first' + nameKey]);
console.log(jonas['last' + nameKey]);



Objects
When creating methods, you can store new properties with the this keyword, just remember to RETURN it with 'this'

Then, you can log that property

const john = {
  fullName: 'John Smith',
  mass: 92,
  height: 1.95,

  calcBmi() {
    this.bmi = this.mass / this.height ** 2;

    return this.bmi;
  },
};

mark.calcBmi();
john.calcBmi();

console.log(mark.bmi);



Destructuring arrays:

const arr = [2, 3, 4];

const [x, y, z] = arr;

console.log(x);
console.log(y);
console.log(z);


Destructuring nested arrays:
(When trying to destructure and there's no value matching the declared variable, returns undefined)

const nested = [2, 3, [4, 5]];
const [i, j, [k, l]] = nested;

console.log(i);
console.log(j);
console.log(k);
console.log(l);



Destructuring objects:
(You can rename your variables using the key names)

const { name, categories, mainMenu } = restaurant;
const {
  name: restaurantName,
  categories: restaurantCategories,
  mainMenu: dishes,
} = restaurant;

console.log(name);
console.log(categories);
console.log(mainMenu);

console.log(restaurantName);
console.log(restaurantCategories);
console.log(dishes);

const { menu = [], starterMenu: starters = [] } = restaurant;
(You can define variables that the object doesn't include when you equal it to something. Also, you can set something to empty and will inherit the real value if it's not empty)